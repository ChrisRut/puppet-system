{"name":"Puppet-system","tagline":"Manage Linux system resources and services from hiera configuration","body":"# puppet-system\r\n\r\nManage Linux system resources and services from hiera configuration.\r\n\r\n* *augeas*: apply file changes using the augeas tool\r\n* *crontabs*: set user crontab entries\r\n* *execs*:  run idempotent external commands\r\n* *facts*: set custom facts\r\n* *files*: create/update files or directories\r\n* *groups*: manage entries in /etc/group\r\n* *hosts*: manage entries in /etc/hosts\r\n* *limits*: manage entries in /etc/security/limits.conf\r\n* *mailaliases* manage entries in /etc/aliases\r\n* *mounts*: manage entries in /etc/fstab\r\n* *network*: configure basic networking and dns\r\n* *ntp*: configure NTP servers in /etc/ntp.conf\r\n* *packages*: manage system packages\r\n* *schedules*: determine when resource config should not be applied and how often\r\n* *services*: manage system services\r\n* *sshd*: manage configuration in /etc/ssh/sshd_config including subsystems like sftp\r\n* *sysconfig*: manage files under /etc/sysconfig: clock, i18n, keyboard, puppet-dashboard, puppet, puppetmaster, selinux\r\n* *sysctl*: manage entries in /etc/sysctl.conf\r\n* *users*: manage users in /etc/passwd and /etc/shadow\r\n* *yumgroups*: manage system package groups\r\n* *yumrepos*: manage yum repository files under /etc/yum.repos.d\r\n\r\n## Documentation\r\n\r\nFor default types (users, groups, mounts, yumrepos, packages, cron, exec) see\r\nthe documentation at http://docs.puppetlabs.com/references/latest/type.html for\r\nthe parameters that can be passed to each of the resources.\r\n\r\nFor augeasproviders types (sysctl, sshd) see\r\nhttp://forge.puppetlabs.com/domcleal/augeasproviders.\r\n\r\nFor limits see http://forge.puppetlabs.com/erwbgy/limits.\r\n\r\n## Usage\r\n\r\nInclude the system module in your puppet configuration:\r\n\r\n    include system\r\n\r\nand add required hiera configuration.\r\n\r\nNote: To exclude certain system classes when doing 'include system' you can set\r\ntheir schedule parameter to 'never'.  This may be useful when testing or\r\ndebugging issues or just to prevent config lower in the hierarchy being\r\napplied.\r\n\r\nFor example:\r\n\r\n    system::packages::schedule:  'never'\r\n    system::yumgroups::schedule: 'never'\r\n\r\nwill ignore any configuration for system::packages and system::yumgroups.\r\n\r\n## augeas\r\n\r\nApply changes to files using the augeas tool.  This enables simple\r\nconfiguration file changes to be made without writing new classes.\r\n\r\nExample 1:\r\n\r\n    system::augeas:\r\n      'ntp':\r\n        context: '/files/etc/ntp.conf'\r\n        changes:\r\n          - 'set server[1] 0.uk.pool.ntp.org'\r\n          - 'set server[2] 1.uk.pool.ntp.org'\r\n          - 'set server[3] 2.uk.pool.ntp.org'\r\n\r\nExample 2:\r\n\r\n    system::augeas:\r\n      'test1':\r\n        context: '/files/etc/sysconfig/firstboot'\r\n        changes:\r\n          - 'set RUN_FIRSTBOOT YES'\r\n        onlyif:  'match other_value size > 0'\r\n\r\nExample 3:\r\n\r\n    system::augeas:\r\n      'jboss_conf':\r\n        context: '/files'\r\n        changes:\r\n          - 'set etc/jbossas/jbossas.conf/JBOSS_IP $ipaddress'\r\n          - 'set etc/jbossas/jbossas.conf/JAVA_HOME /usr'\r\n        load_path: '/usr/share/jbossas/lenses'\r\n\r\nDefaults:\r\n\r\n* ensure: present\r\n* user: root\r\n\r\n## crontabs\r\n\r\nSet user crontab entries\r\n\r\nExample configuration:\r\n\r\n    system::crontabs:\r\n      'root-logrotate':\r\n        command: '/usr/sbin/logrotate'\r\n        user:    'root'\r\n        hour:    '2'\r\n        minute:  '0'\r\n\r\nDefaults:\r\n\r\n* ensure: present\r\n* user: root\r\n\r\n## execs\r\n\r\nRun idempotent external commands\r\n\r\nExample configuration:\r\n\r\n    system::execs:\r\n      'update-tomcat-deploy':\r\n        command: '/usr/bin/svn up'\r\n        cwd:     '/apps/tomcat1/deploy'\r\n        user:    'tomcat1'\r\n      'create-deploy-dir':\r\n        command: '/bin/mkdir -p /apps/tomcat1/deploy'\r\n        unless:  '/usr/bin/test -d /apps/tomcat1/deploy'\r\n\r\nNote: The commands will be run on every Puppet run unless you specify 'onlyif',\r\n'unless' or 'refreshonly' parameters.\r\n\r\n## facts\r\n\r\nSet custom facts using the facter_dot_d Facter plugin that loads facts from\r\n/etc/facter/facts.d\r\n(https://github.com/ripienaar/facter-facts/tree/master/facts-dot-d)\r\n\r\nExample configuration:\r\n\r\n    system::facts:\r\n      location:\r\n        value: 'London'\r\n      ntpq:\r\n        type:  'script'\r\n        value: \"#!/bin/bash\\nprintf ntpq=\\n/usr/sbin/ntpq -p | /usr/bin/tail -1\\n\"\r\n\r\nThese facts can be queried on a host using 'facter -p':\r\n\r\n    $ facter -p location\r\n    London\r\n    $ facter -p ntpq\r\n    *10.43.4.8       158.43.128.33    2 u  820 1024  377    0.538    0.155   0.048\r\n\r\nSet:\r\n\r\n    system::facts::cleanold: true\r\n\r\nto remove facts from the old locations under /etc/profile.d and in\r\n/etc/sysconfig/puppet.\r\n\r\n## files\r\n\r\nCreate or update files or directories\r\n\r\nExample 1 - create a mount point for an NFS mounted directory:\r\n\r\n    system::files:\r\n      /apps:\r\n        ensure:  'directory'\r\n        owner:   'root'\r\n        group:   'root'\r\n        mode:    '0755'\r\n\r\nExample 2 - create a file with the given content:\r\n\r\n    system::files:\r\n      /etc/motd:\r\n        ensure:  'present'\r\n        owner:   'root'\r\n        group:   'root'\r\n        mode:    '0644'\r\n        content: \"Authorised access only\\nIf unauthorised log off now or face prosecution\\n\"\r\n\r\nNote: Use double-quotes if your content contains embedded newlines (\\n) or tabs\r\n(\\t).  Normaly you will also want a terminating newline.\r\n\r\n## groups\r\n\r\nManage entries in /etc/group\r\n\r\nExample configuration:\r\n\r\n    system::groups:\r\n      'sysadmins':\r\n        ensure: 'present'\r\n        gid:    '1500'\r\n      'ops':\r\n        gid:    '1503'\r\n    system::groups::realize:\r\n      - 'keith'\r\n \r\nDefaults:\r\n\r\n* ensure: present\r\n\r\nBy default virtual group resources are created that must then be realized.  To\r\ncreate real resources instead (as with earlier versions of this module) use:\r\n\r\n    system::groups::true: 'true'\r\n\r\n## hosts\r\n\r\nManage entries in /etc/hosts\r\n\r\nExample configuration:\r\n\r\n    system::hosts:\r\n      puppet:\r\n        ensure:       'present'\r\n        ip:           '10.5.11.19'\r\n        host_aliases: [ 'puppet.local' ]\r\n\r\nDefaults:\r\n* ensure: present\r\n\r\nSee: http://docs.puppetlabs.com/references/latest/type.html#host\r\n\r\n## limits\r\n\r\nManage entries in /etc/security/limits.conf\r\n\r\nExample configuration:\r\n\r\n    system::limits:\r\n      '*':\r\n        nofile:\r\n          soft: 1024\r\n          hard: 2048\r\n      '@weblogic':\r\n        nofile:\r\n          soft: 16384\r\n          hard: 16384\r\n        nproc:\r\n          soft: 2048\r\n          hard: 2048\r\n\r\nNo defaults.\r\n\r\n## mailaliases\r\n\r\nManage entries in /etc/aliases\r\n\r\nExample configuration:\r\n\r\n    system::mailaliases:\r\n      postmaster:\r\n        recipient: 'root'\r\n      webmaster:\r\n        recipient: 'fred@domain.com'\r\n\r\nNo defaults.\r\n\r\nSee: http://docs.puppetlabs.com/references/latest/type.html#mailalias\r\n\r\n## mounts\r\n\r\nManage entries in /etc/fstab\r\n\r\nExample configuration:\r\n\r\n    system::mounts:\r\n      '/home':\r\n        ensure:  'mounted'\r\n        device:  '/dev/mapper/vg_x120-lv_home'\r\n        atboot:  'true'\r\n        fstype:  'ext4'\r\n        options: 'defaults'\r\n\r\nDefaults:\r\n\r\n* atboot: true\r\n* ensure: mounted\r\n\r\nNote: These resources are created last so any required users, groups or mount\r\npoint directories have a chance to be created first.\r\n\r\n## network\r\n\r\nConfigure basic networking: set hostname, enable/disable zeroconf/IPv6, set the default route,\r\nconfigure interfaces and their static routes, configure nameserver resolvers and domains\r\n\r\nExample configuration:\r\n\r\n    system::network::hostname: 'puppet.domain.com'\r\n    system::network::gateway:  '10.7.0.1'\r\n    system::network::ipv6:     'false'\r\n    system::network::zeroconf: 'false'\r\n    system::network::dns:\r\n      nameservers: [ '10.7.96.2', '10.7.96.2' ]\r\n      domains:     [ 'domain.com', 'sub.domain.com' ]\r\n    system::network::interfaces:\r\n      eth0:\r\n        ipaddress: '10.7.96.21'\r\n        netmask:   '255.255.240.0'\r\n        routes:\r\n          '10.0.0.0/8':\r\n            via: '10.16.0.250'\r\n\r\n## ntp\r\n\r\nManage NTP servers in /etc/ntp.conf\r\n\r\nExample 1:\r\n\r\n    system::ntp::iburst:  'true'\r\n    system::ntp::servers: [ 'ntp1.example.com' ]\r\n\r\nExample 2:\r\n\r\n    system::ntp::iburst:  'true'\r\n    system::ntp::country: 'uk'\r\n\r\nSee https://github.com/erwbgy/puppet-ntp for more details\r\n\r\nNote: The NTP algorithm does not work properly with two NTP servers.\r\n\r\n## packages\r\n\r\nManage system packages\r\n\r\nExample configuration:\r\n\r\n    system::packages:\r\n      AdobeReader_enu:\r\n        ensure: '9.5.1-1'\r\n      ConsoleKit:\r\n        ensure: '0.4.5-2.fc17'\r\n\r\nDefaults:\r\n\r\n* ensure: installed\r\n\r\n## schedules\r\n\r\nCreate schedules that determine when a resource should not be applied and the\r\nnumber times it should be applied within a specified time period.\r\n\r\nExample configuration:\r\n\r\n    system::schedules:\r\n      'maintenance':\r\n        range:  '2 - 4'\r\n        period: 'daily'\r\n        repeat: 1\r\n      'half-hourly':\r\n        period: 'hourly'\r\n        repeat: 2\r\n\r\nThe defined schedules can then be passed using the 'schedule' parameter to\r\nother types.\r\n\r\nExample 1:\r\n\r\n    system::schedule: 'maintenance'\r\n\r\nsets the default schedule for all system resources so that they are only\r\nrun during the maintenance window of 2:00 to 04:59.\r\n\r\nExample 2:\r\n\r\n    system::services::schedule: 'daily'\r\n\r\nsets the default schedule for all system::services resources to be once a day.\r\n\r\nExample 3:\r\n\r\n    system::services:\r\n      httpd:\r\n        ensure: 'running'\r\n        enable: 'true'\r\n        schedule: 'half-hourly'\r\n\r\noverrides the services schedule for the httpd resource using a custom schedule\r\nwe defined above.\r\n\r\nThe default Puppet schedules are:\r\n\r\n* daily\r\n* hourly\r\n* monthly\r\n* never\r\n* weekly\r\n\r\nand the system::schedule class defines another called *always* that schedules\r\nthe resource on every Puppet run.\r\n\r\n## selbooleans\r\n\r\nManages SELinux booleans\r\n\r\nExample configuration:\r\n\r\n    system::selbooleans:\r\n      'httpd_can_network_connect':\r\n        value: 'on'\r\n        persistent: 'true'\r\n\r\nDefaults:\r\n\r\n* persistent: false\r\n\r\n## services\r\n\r\nManage system services\r\n\r\nExample configuration:\r\n\r\n    system::services:\r\n      cups:\r\n        ensure: 'stopped'\r\n        enable: 'false'\r\n      sshd:\r\n        ensure: 'running'\r\n        enable: 'true'\r\n      ntpd:\r\n        ensure: 'running'\r\n        enable: 'true'\r\n\r\nDefaults:\r\n\r\n* ensure: running\r\n\r\nNote:\r\n\r\n* Do not specify any services that are managed by other Puppet modules (eg.\r\n  ntpd or network) otherwise you may get conflicts\r\n\r\n## sshd\r\n\r\nManage settings in /etc/ssh/sshd.conf\r\n\r\nSynchronize host keys file entries across all puppet-managed hosts.\r\n\r\nExample configuration:\r\n\r\n    system::sshd:\r\n      AllowGroups:\r\n        value:     [ 'sshusers', 'admin' ]\r\n      PermitRootLogin:\r\n        value:     'without-password'\r\n        condition: 'Host example.net'\r\n\r\n    system::sshd::subsystem:\r\n      sftp:\r\n        command: '/usr/libexec/openssh/sftp-server -u 0002'\r\n\r\n    system::sshd::sync_host_keys: 'true'\r\n\r\nNo defaults.\r\n\r\nSee:\r\n\r\n* https://github.com/domcleal/augeasproviders/blob/master/lib/puppet/type/sshd_config.rb\r\n* https://github.com/domcleal/augeasproviders/blob/master/lib/puppet/type/sshd_config_subsystem.rb\r\n\r\n## sysconfig\r\n\r\nManage settings in files under /etc/sysconfig\r\n\r\nExample configuration:\r\n\r\n    system::sysconfig::clock:\r\n      timezone: 'Europe/London'\r\n\r\n    system::sysconfig::i18n:\r\n      # Run 'locale -a' to see possible lang values\r\n      lang: 'en_GB.utf8'\r\n\r\n    system::sysconfig::keyboard:\r\n      keytable:     'uk'\r\n      model:        'pc105'\r\n      layout:       'gb'\r\n      keyboardtype: 'pc'\r\n\r\n    system::sysconfig::puppet:\r\n      server: 'puppet.sbet'\r\n\r\n    system::sysconfig::selinux:\r\n      state: 'enforcing'\r\n\r\nNo defaults.\r\n\r\nNote: Values must not contain whitespace\r\n\r\n## sysctl\r\n\r\nManage settings in /etc/sysctl.conf\r\n\r\nExample configuration:\r\n\r\n    system::sysctl:\r\n      kernel.msgmnb:\r\n        value: '131072'\r\n        comment: 'Controls the default maximum size of a message queue'\r\n      kernel.msgmax:\r\n        value: '131072'\r\n        comment: ' Controls the maximum size of a message, in bytes'\r\n\r\nNo defaults.\r\n\r\nSee:\r\n\r\n* https://github.com/domcleal/augeasproviders/blob/master/lib/puppet/type/sysctl.rb\r\n\r\n\r\nNote: Quote numeric values to avoid \"can't convert Fixnum into String\" errors\r\n\r\n## users\r\n\r\nManage users entries in /etc/passwd and /etc/shadow\r\n\r\nExample configuration:\r\n\r\n    system::users:\r\n      'keith':\r\n        ensure:    'present'\r\n        comment:   'Keith Burdis'\r\n        gid:       '500'\r\n        groups:    ['wheel']\r\n        home:      '/home/keith'\r\n        shell:     '/bin/bash'\r\n        uid:       '500'\r\n      'fred':\r\n        comment:   'Fred Bloggs'\r\n        uid:       '503'\r\n        gid:       '503'\r\n        home:      '/home/fred'\r\n        managehome: true\r\n    system::users::realize:\r\n      - 'keith'\r\n\r\nDefaults:\r\n\r\n* ensure: present\r\n* shell:  /bin/bash\r\n\r\nBy default virtual user resources are created that must then be realized.  To\r\ncreate real resources instead (as with earlier versions of this module) use:\r\n\r\n    system::users::real: 'true'\r\n\r\n## yumgroups\r\n\r\nManage system package groups\r\n\r\nExample configuration:\r\n\r\n    system::yumgroups:\r\n      'Base':\r\n        ensure: 'present'\r\n      'Console internet tools':\r\n        ensure: 'present'\r\n      'Perl Support':\r\n        ensure: 'present'\r\n        usecache: false\r\n      'Ruby Support':\r\n        ensure: 'present'\r\n        optional: true\r\n        usecache: false\r\n\r\nDefaults:\r\n\r\n* optional: false\r\n* usecache: true\r\n* schedule: daily\r\n\r\nNote: Set 'usecache: false' if 'yum -C grouplist' does not work on your system\r\nand you are getting System::Yumgroup resources created on every Puppet run\r\n\r\nNote: By default the yumgroup type has a 'daily' schedule to reduce the time\r\nPuppet runs take - package group changes are usually rare after the host is\r\nfirst set up. This means that it will run once every 24 hours. You override\r\nthis by supplying your own schedule parameter - see system::schedules to create\r\nyour own custom schedules.\r\n\r\n## yumrepos\r\n\r\nManage yum repository files under /etc/yum.repos.d\r\n\r\nExample configuration:\r\n\r\n    system::yumrepos:\r\n      'puppetlabs-deps':\r\n        baseurl:  'http://yum.puppetlabs.com/fedora/f17/dependencies/$basearch'\r\n        descr:    'Puppet Labs Dependencies Fedora 17 - $basearch'\r\n        enabled:  '1'\r\n        gpgcheck: '1'\r\n        gpgkey:   'file:///etc/pki/rpm-gpg/RPM-GPG-KEY-puppetlabs'\r\n      'puppetlabs-products':\r\n        baseurl:  'http://yum.puppetlabs.com/fedora/f17/products/$basearch'\r\n        descr:    'Puppet Labs Products Fedora 17 - $basearch'\r\n        enabled:  '1'\r\n        gpgcheck: '1'\r\n        gpgkey:   'file:///etc/pki/rpm-gpg/RPM-GPG-KEY-puppetlabs'\r\n\r\nDefaults:\r\n\r\n* enabled: 1\r\n* gpgcheck: 1\r\n\r\n## providers\r\n\r\nThe augeasproviders module can be an alternate provider for the host, mailalias\r\nand mounttab types.\r\n\r\nExample configuration:\r\n\r\n    system::providers:\r\n      host: 'augeas'\r\n      mailalias: 'augeas'\r\n      mounttab: 'augeas'\r\n\r\n## Notes\r\n\r\n* When requiring packages in other modules wrap them in an \"if !defined\" check\r\n  to avoid conflicts with system::packages - for example:\r\n\r\n    if ! defined(Package['bash']) { package { 'bash': ensure => installed } }\r\n\r\n* Put the system class *first* in the list of classes to include when using\r\n  hiera_include. This avoids problems with conflicting package declarations -\r\n  which shouldn't be a problem because system::packages is run in an earlier \r\n  run stage but is.\r\n\r\n* As with many default types you can often specify a 'target' parameter to\r\n  specify a different configuration filename to change.\r\n\r\n## Support\r\n\r\nLicense: Apache License, Version 2.0\r\n\r\nGitHub URL: https://github.com/erwbgy/puppet-system\r\n","google":"UA-37513727-1","note":"Don't delete this file! It's used internally to help with page regeneration."}